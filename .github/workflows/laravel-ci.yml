name: Build, test & deploy

on:
  push:
    branches: [ main ]

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "18"
  PROJECT_DIR: "/opt/test-prime-it/src"
  DEFAULT_PORT: 22

jobs:
  # ───────────────────────────────────
  # 1️⃣  BUILD & TEST
  # ───────────────────────────────────
  ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    steps:
      - uses: actions/checkout@v4

      # PHP & Composer
      - uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          coverage: none

      - name: Prepare sqlite & env
        run: |
          cp .env.test .env
          touch database/database.sqlite
        working-directory: src

      - name: Install composer deps
        run: composer install
        working-directory: src

      # Node / Vite
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: "src/package-lock.json"

      - name: Build assets
        run: |
          npm ci
          npm run build
        working-directory: src

      # Laravel tests
      - name: Run Laravel tests
        run: |
          php artisan migrate
          php artisan db:seed
          ./vendor/bin/phpunit
        working-directory: src

  # ───────────────────────────────────
  # 2️⃣  DEPLOY  (runs if ci succeeds)
  # ───────────────────────────────────
  deploy:
    needs: ci
    runs-on: ubuntu-latest
    steps:
      - name: Verify SSH secrets
        run: |
          echo "User: ${{ secrets.ROOT }}"
          if [ -z "${{ secrets.SSH_KEY }}" ]; then
            echo "❌ SSH_KEY secret missing"; exit 1
          fi
          echo "✅ SSH_KEY secret found"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host:     ${{ secrets.HOST }}
          username: ${{ secrets.ROOT }}
          key:      ${{ secrets.SSH_KEY }}
          port:     ${{ env.DEFAULT_PORT }}
          script: |
            set -e

            PROJECT_DIR="${{ env.PROJECT_DIR }}"

            echo "▶️  Ensure project dir exists"
            if [ ! -d "$PROJECT_DIR" ]; then
              mkdir -p "${PROJECT_DIR%/*}"
              git clone https://github.com/${{ github.repository }} "${PROJECT_DIR%/*}"
              cd "$PROJECT_DIR"
              cp .env.example .env
            fi

            cd "$PROJECT_DIR"

            echo "[1/5] git pull"
            git pull origin main

            echo "[2/5] composer / npm"
            composer install --no-dev --optimize-autoloader
            npm ci
            npm run build

            echo "[3/5] migrations"
            php artisan migrate --force

            echo "[4/5] seeders"
            php artisan db:seed --force

            echo "[5/5] cache optimise"
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            echo "✅ Deployment successful!"
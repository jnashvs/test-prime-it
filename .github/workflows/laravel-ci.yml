# File: .github/workflows/deploy.yml
name: Deploy to Production

# This workflow triggers automatically on any push to the 'main' branch.
on:
  push:
    branches:
      - main

jobs:
  deploy:
    # The job will run on a standard GitHub-hosted runner.
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository's code. 
      # This is needed so the workflow can read this deploy.yml file.
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Connect to your server and run the deployment script.
      # This is the main step that does all the work on your server.
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the root directory of your project on the server.
            # !!! IMPORTANT !!! 
            # YOU MUST CHANGE THIS PATH to match your server's setup.
            cd ~/test-prime-it
            
            # Pull the latest changes from your 'main' branch on GitHub.
            # This brings your new code onto the server.
            echo "Pulling latest code from GitHub..."
            git pull origin main
            
            # Build the docker images directly on the server using your docker-compose file.
            # --no-cache ensures all layers are rebuilt with the latest code.
            echo "Building Docker images on the server..."
            docker-compose build --no-cache
            
            # Stop the current running containers and start the new ones in detached mode.
            # --remove-orphans cleans up any old service containers.
            echo "Restarting application with new images..."
            docker-compose up -d --remove-orphans
            
            # === Post-Deployment Commands ===
            # Run these commands inside the newly started 'laravel-prim-it' container.
            
            echo "Running post-deployment commands..."
            # Install/update composer dependencies for production.
            docker-compose exec -T laravel-prim-it composer install --no-interaction --no-dev --prefer-dist
            
            # Run database migrations. '--force' is required for production.
            docker-compose exec -T laravel-prim-it php artisan migrate --force
            
            # Optimize Laravel for production.
            docker-compose exec -T laravel-prim-it php artisan config:cache
            docker-compose exec -T laravel-prim-it php artisan route:cache
            docker-compose exec -T laravel-prim-it php artisan view:cache
            
            # Clean up old, unused Docker images on the server to save disk space.
            echo "Cleaning up old Docker images..."
            docker image prune -af
            
            echo "Deployment successful!"